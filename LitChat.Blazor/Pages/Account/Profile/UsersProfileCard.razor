@page "/card/{ContactId}"
@attribute [Authorize]

<MudContainer Style="display: inline-block; position: relative; top: 0; bottom: 0; left: 0; right: 0; width: 600px; height: 200px; margin: auto; ">
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Dark" Style="height:70px; width:70px;">@users.FirstName</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@users.FirstName @users.LastName </MudText>
                <MudText Typo="Typo.body2">@users.Email</MudText>
                <MudText Typo="Typo.caption">@users.Phone </MudText>
                <br />
                @if (!string.IsNullOrEmpty(@connection.UserAccount) && @connection.IsOnline == true)
                {
                    <MudText Typo="Typo.caption" Color="Color.Success">Online: @connection.ConnectedAt </MudText>
                }
                else
                {
                    <MudText Typo="Typo.caption" Color="Color.Warning">Offline: @connection.DisconnectedAt </MudText>
                }
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton OnClick="@(() => Return())" Icon="@Icons.TwoTone.ArrowBackIosNew" Color="Color.Inherit" ButtonType="ButtonType.Button">Return</MudIconButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body2">@users.Description.</MudText>
        </MudCardContent>
        <MudCardActions>
            @if (IsApproved)
            {
                <MudButton OnClick="@(() => AddUserToFavorite(users))" StartIcon="@Icons.Sharp.PersonAdd" Color="Color.Inherit" ButtonType="ButtonType.Button">Add to friends</MudButton>
            }
            else
            {
                <MudButton OnClick="@(() => RemoveUserFromFavorite(users))" StartIcon="@Icons.Sharp.PersonAddDisabled" Color="Color.Inherit" ButtonType="ButtonType.Button">Remove from friends</MudButton>
            }
        </MudCardActions>
    </MudCard>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3 mb-0">@errorMessage</div>
    }
</MudContainer>


@code {
    private Models.Users users = new();
    private Connections connection = new();
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public string ContactId { get; set; }
    [Parameter] public bool IsApproved { get; set; }
    private string errorMessage;

    void Return()
    {
        _navigationManager.NavigateTo("/users");
    }
    async Task AddUserToFavorite(Models.Users users)
    {
        CurrentUserId = _accountService.Account.Id.ToString();
        ContactId = users.Id.ToString();
        var favoriteUser = new FavoritesList
            {
                OwnerAccountId = CurrentUserId,
                FavoriteUserAccountId = ContactId,
                Email = users.Email,
                FirstName = users.FirstName,
                LastName = users.LastName,
                IsDeleted = false
            };
        await _favoritesList.AddUserToFavoriteAsync(favoriteUser);
        IsApproved = favoriteUser.IsDeleted;
    }
    async Task RemoveUserFromFavorite(Models.Users users)
    {
        ContactId = users.Id.ToString();
        var contact = await _favoritesList.GetFavoritesUserAsync(ContactId);
        await _favoritesList.RemoveUserFromFavoriteAsync(contact.FavoriteUserAccountId.ToString());
        IsApproved = true;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await _accountService.GetUserDetailsAsync(ContactId);
            var friendInfo = await _friendService.GetFriend(users.Id);
            IsApproved = friendInfo.Approved;
            connection = await _connectionService.GetStatusUserAsync(users.Id.ToString());
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            IsApproved = true;
            StateHasChanged();
        }
    }
    }