@page "/account/login"
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mt-3 mb-0">@error</div>
            }
            <NavLink href="account/register" class="btn btn-link">Register</NavLink>
            <NavLink href="account/forgot-password" class="btn btn-link">Forgot your password?</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private Models.AuthAccount model = new Models.AuthAccount();
    private bool loading;
    private string error;

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AccountService.Account != null)
        {
            NavigationManager.NavigateTo("/");
        }
    }


    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AccountService.Login(model);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}