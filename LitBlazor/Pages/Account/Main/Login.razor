@page "/account/login"
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<div style="max-width: 400px;">
    <h4 class="card-header">Welcome to the LitChat!</h4>
    <EditForm Model="@loginRequest" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="loginRequest.Email" For="@(() => loginRequest.Email)" />
                <MudTextField Label="Password"  Class="mt-3"
                              @bind-Value="loginRequest.Password" For="@(() => loginRequest.Password)" InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Size=Size.Large Class="ml-auto">Login</MudButton>
                <MudSpacer/>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick=@(()=>Forgott()) Color="Color.Warning" Size=Size.Small Class="ml-auto">Forgot password</MudButton>
                <MudSpacer/>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick=@(()=>Register()) Color="Color.Primary" Size=Size.Small Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>
         @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mt-3 mb-0">@error</div>
            }
    </EditForm>
</div>
@code {
    private AuthAccount loginRequest { get; set; } = new AuthAccount();
    private bool loading;
    private string error;

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AccountService.Account != null)
        {
            NavigationManager.NavigateTo("/chat");
        }
    }
    protected void Register()
    {
       NavigationManager.NavigateTo("/account/register");
    }
    protected void Forgott()
    {
       NavigationManager.NavigateTo("/account/forgot-password");
    }
    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
        await AccountService.Login(loginRequest);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/chat";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}
