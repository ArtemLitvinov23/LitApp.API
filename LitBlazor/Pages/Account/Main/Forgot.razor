@page "/account/forgot-password"

<div style="max-width: 400px;">
    <EditForm Model="@forgotPassword" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="forgotPassword.Email" For="@(() => forgotPassword.Email)" HelperText="enter valid email adress"  InputType="InputType.Email"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Size=Size.Large Class="ml-auto">Send</MudButton>
                <MudSpacer/>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick=@(()=>Login()) Color="Color.Warning" Size=Size.Small Class="ml-auto">Cancel</MudButton>
            </MudCardActions>
        </MudCard>
         @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mt-3 mb-0">@error</div>
            }
    </EditForm>
</div>
@code {
    private Models.ForgotPassword forgotPassword = new();
    private string error;
    protected void Login()
    {
        _navigationManager.NavigateTo("/account/login");
    }
    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (_accountService.Account != null)
        {
            _navigationManager.NavigateTo("/chat");
        }
    }


    private async void HandleValidSubmit()
    {
        try
        {
            await _accountService.ForgotPassword(forgotPassword);
            _navigationManager.NavigateTo("account/reset-password");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            StateHasChanged();
        }
    }
}
