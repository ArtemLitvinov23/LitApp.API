@page "/users"
@attribute [Authorize]
@layout MainLayout
@inject IAccountService AccountService
@inject HttpClient HttpClient
@inject ILocalStorageService localStorageService 
@using System.Net.Http.Headers

<div class="container">
    <h3 class="p-3 text-center">Blazor WebAssembly - Display a list of all users</h3>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th style="width:30%">Email</th>
                <th style="width:10%">Name</th>
                <th style="width:15%">Last name</th>
                <th style="width:5%"></th>
                <th style="width:5%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
            <tr>
                <td>@user.Email</td>
                <td>@user.UserName</td>
                <td>@user.LastName</td>
                <td style="white-space: nowrap">
                    <button  @onclick="@(() => AddUserToFavorite(user.Email))" class="btn btn-sm btn-dark">Favorite</button>
                </td>
                <td style="white-space: nowrap">
                    <button  @onclick="@(() => ChatWithUser(user.Email))" class="btn btn-sm btn-dark">Chat</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3 mb-0">@errorMessage</div>
    }
</div>

@code {
    private bool loading;
    private Models.Users[] users = new Models.Users[] { };
    private string errorMessage;
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44311/api/Account/get-users");
            var savedToken = await localStorageService.GetItemAsync<Models.Account>("account");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", savedToken.jwtToken);
            using var httpResponse = await HttpClient.SendAsync(request);
            users = await httpResponse.Content.ReadFromJsonAsync<Models.Users[]>();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
    private async void AddUserToFavorite(string email)
    {
        var user = users.First(x => x.Email == email);
        StateHasChanged();
    }
    private async void ChatWithUser(string email)
    {
        var user = users.First(x => x.Email == email);
        StateHasChanged();
    }
}
