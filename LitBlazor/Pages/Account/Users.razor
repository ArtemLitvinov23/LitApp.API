@page "/users"
@attribute [Authorize]
@layout MainLayout
@inject IAccountService AccountService
@inject IChatService _chatService
@inject IFavoritesListService _favoritesList
@inject NavigationManager _navigationManager
@inject HttpClient HttpClient
@inject ILocalStorageService localStorageService 
@using System.Net.Http.Headers

<MudTable Items="@users" Filter="new Func<Models.Users,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info" Dense="@dense" Bordered="@bordered" Striped="@striped">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Last name</MudTh>
        <MudTh> </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last name"> @context.LastName </MudTd>
        <MudTd>
            <MudButton OnClick="@(() => LoadUserChat(context.Id.ToString()))" StartIcon="@Icons.Material.Filled.Chat" Color="Color.Secondary" ButtonType="ButtonType.Button">Chat</MudButton>
            @if (!added)
            {
                <MudButton OnClick="@(() => AddUserToFavorite(context))" StartIcon="@Icons.Filled.Favorite" Color="Color.Inherit" ButtonType="ButtonType.Button">Favorite</MudButton>
            }
            else
            {
                <MudButton OnClick="@(() => AddUserToFavorite(context))" StartIcon="@Icons.Filled.FavoriteBorder" Color="Color.Dark" ButtonType="ButtonType.Button">Favorite</MudButton>
            }
            @if (!deleted)
            {
                <MudButton OnClick="@(() => RemoveUserFromFavorite(context))" StartIcon="@Icons.Filled.Delete" Color="Color.Tertiary" ButtonType="ButtonType.Button">Delete</MudButton>
            }
            else
            {
                <MudButton OnClick="@(() => RemoveUserFromFavorite(context))" StartIcon="@Icons.Filled.DeleteOutline" Color="Color.Dark" ButtonType="ButtonType.Button">Delete</MudButton>
            }
        </MudTd>
    </RowTemplate>
</MudTable>
<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@loading" Color="Color.Info">Loading</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.FirstName</MudText>
        <MudText Inline="true" Class="align-self-center">Selected2: @selectedItem2?.FirstName</MudText>
    </div>
</div>
@code {
    private bool loading = false;
    private IEnumerable<Models.Users> users = new List<Models.Users>();
    private bool dense = false;
    private bool striped = false;
    private bool bordered = false;
    private bool added = false;
    private bool deleted = false;
    private string searchString1 = "";
    private string searchString2 = "";
    private Models.Users selectedItem1 = null;
    private Models.Users selectedItem2 = null;
    private HashSet<Users> selectedItems = new HashSet<Users>();
    [Parameter] public string CurrentUserId{ get; set; }
    [Parameter] public string ContactId{ get; set; }

    async Task LoadUserChat(string userId)
    {
        var contact = await _chatService.GetUserDetailsAsync(userId);
        ContactId = contact.Id.ToString();
        _navigationManager.NavigateTo($"chat/{ContactId}");
    }
    async Task AddUserToFavorite(Models.Users users)
    {
        if(!added)
        {
            var user = await AccountService.GetUserDataFromLocalStorage();
            CurrentUserId = user.Id.ToString();
            var favoriteUser = new FavoritesList
        {
            AccountId = CurrentUserId,
            Email = users.Email,
            FirstName = users.FirstName,
            LastName = users.LastName
        };
            await _favoritesList.AddUserToFavoriteAsync(favoriteUser);
            added = true;
        }
        else
        {
            added = false;
        }
    }
    async Task RemoveUserFromFavorite(Models.Users users)
    {
        var contact = await _chatService.GetUserDetailsAsync(users.Id.ToString());
        var userAccountId = await _favoritesList.GetAllFavoritesAsync();
        await _favoritesList.RemoveUserFromFavoriteAsync(ContactId);
        deleted = true;
    }
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44311/api/Account/get-users");
            var savedToken = await localStorageService.GetItemAsync<Models.Account>("account");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", savedToken.JwtToken);
            using var httpResponse = await HttpClient.SendAsync(request);
            users = await httpResponse.Content.ReadFromJsonAsync<List<Models.Users>>();
            loading = false;
        }
        catch
        {
            loading = false;
            StateHasChanged();
        }
    }

    private bool FilterFunc1(Models.Users users) => FilterFunc(users, searchString1);
    private bool FilterFunc2(Models.Users users) => FilterFunc(users, searchString2);

    private bool FilterFunc(Models.Users users, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (users.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{users.Id} {users.FirstName} {users.LastName} {users.Email}".Contains(searchString))
            return true;
        return false;
    }
}

