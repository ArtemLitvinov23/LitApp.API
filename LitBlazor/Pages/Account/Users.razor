@page "/favorite"
@attribute [Authorize]
@layout MainLayout
@inject IAccountService AccountService
@inject HttpClient HttpClient
@inject ILocalStorageService localStorageService 
@using System.Net.Http.Headers

<MudTable Items="@users.Take(4)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Last name</MudTh>
        <MudTh> </MudTh>
    </HeaderContent>
    <RowTemplate>
        @foreach(var user in users)
        {  
         <MudTd DataLabel="Nr">@user.Id</MudTd>
        <MudTd DataLabel="Email">@user.Email</MudTd>
        <MudTd DataLabel="Name">@user.UserName</MudTd>
        <MudTd DataLabel="Last name"> @user.LastName </MudTd>
        <MudTd>
            <MudNavLink Href = "/chat" Icon="@Icons.Filled.Chat"/>
        </MudTd>
        }
       
          @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3 mb-0">@errorMessage</div>
            }
    </RowTemplate>
</MudTable>
<MudSwitch @bind-Checked="loading">Show Loading</MudSwitch>
@code {
    private bool loading;
    private Models.Users[] users = new Models.Users[] { };
    private string errorMessage;
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44311/api/Account/get-users");
            var savedToken = await localStorageService.GetItemAsync<Models.Account>("account");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", savedToken.jwtToken);
            using var httpResponse = await HttpClient.SendAsync(request);
            users = await httpResponse.Content.ReadFromJsonAsync<Models.Users[]>();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}
