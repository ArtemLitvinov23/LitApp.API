@inject IChatService _chatService
@inject IFavoritesListService _favoriteService
@inject NavigationManager _navigationManager
@inject IAccountService _accountService
@inject IFavoritesListService _favoritesList
@attribute [Authorize]
@page "/chat/{ContactId}"
@page "/chat"
@page "/"
<div class="d-flex flex-grow-1 flex-row">
    <MudPaper Elevation="25" Class="py-4 flex-grow-1">
        <MudToolBar Dense="true">
            @if (string.IsNullOrEmpty(ContactId))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }
           
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
            @foreach (var message in messages)
            {
                <div class="d-flex flex-row my-4">
                    <div class="mr-4">
                        <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@message.FromEmail.ToUpper().FirstOrDefault()</MudAvatar>
                    </div>
                    <div>
                        <MudText Typo="Typo.body1">@message.FromEmail</MudText>
                        <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                        @if(Online == true){
                          <MudSpacer/>
                          <MudText Typo="Typo.caption" Color="Color.Success" Style="font-size: xxx-small!important;">Online</MudText>
                        }
                        <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Message</MudText>
                    </div>
                </div>
            }
        </div>
            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mt-3 mb-0">@error</div>
            }
        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
            <MudTextField T="string" Placeholder="Enter your message..."DisableUnderLine="true" Class="mt-n2 mx-4"
                          @bind-Value="CurrentMessage" For="@(()=> CurrentMessage)" />
            <MudButton OnClick="SubmitAsync" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="ButtonType.Button">Send</MudButton>
        </MudPaper>
    </MudPaper>
        <MudPaper Elevation="25" Class="pa-3 ml-6" MinWidth="350px">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
                <MudText Typo="Typo.h6">my contacts</MudText>
            </MudToolBar>
            <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
                <MudList Clickable="true">
                    @foreach (var user in ChatUsers)
                    {
                        <MudListItem Class="pa-0 px-2" OnClick="@(() => LoadUserChat(user.FavoriteUserAccountId.ToString()))">
                            <div class="d-flex flex-row mt-n1 mb-n1">
                                <div class="mr-4">
                                    <MudBadge Class="my-2">
                                        @if (user.OwnerAccountId.ToString() == ContactId)
                                        {
                                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                                                @user.Email.ToUpper().FirstOrDefault()
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                             <MudAvatar Color="Color.Dark" Style="height:70px; width:70px;">@user.FirstName</MudAvatar>
                                        }
                                    </MudBadge>
                                </div>
                                <div>
                                    <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.Email</MudText>
                                    <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.FirstName @user.LastName </MudText>
                                </div>
                            </div>
                        </MudListItem>
                         <MudButton OnClick="@(() => LoadFullChatHistory(user.FavoriteUserAccountId.ToString()))" StartIcon="@Icons.Filled.History" Color="Color.Primary" Size="Size.Small" ButtonType="ButtonType.Button">Chat history</MudButton>
                         <MudButton OnClick="@(() => ShowInformation(user.FavoriteUserAccountId.ToString()))" StartIcon="@Icons.Material.Outlined.Info" Color="Color.Info" Size="Size.Small" ButtonType="ButtonType.Button">Show profile info</MudButton>
                    }
                </MudList>
            </div>
        </MudPaper>
</div>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }
    [Parameter] public string CurrentMessage { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public string CurrentUserEmail { get; set; }
    private bool Online;
    private string error;
    private List<Models.ChatMessages> messages = new List<Models.ChatMessages>();
    private async Task SubmitAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && !string.IsNullOrEmpty(ContactId))
            {
                var chatHistory = new ChatMessages()
            {
                Message = CurrentMessage,
                ToUserId = ContactId,
                CreatedDate = DateTime.Now,
                FromEmail = CurrentUserEmail,
                ToEmail = ContactEmail
            };
                await _chatService.SaveMessageAsync(CurrentUserId,chatHistory);
                chatHistory.FromUserId = CurrentUserId;
                await hubConnection.SendAsync("SendMessageAsync", chatHistory, CurrentUserEmail);
                CurrentMessage = string.Empty;
            }
        }
        catch(Exception ex)
        {
            error = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckConnection(); // checking connection to hub
            hubConnection.On<ChatMessages, string>("ReceiveMessage", async (message, userName) =>
            {
                if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId) || (ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
                {

                    if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId))
                    {
                        messages.Add(new ChatMessages { Message = message.Message, CreatedDate = message.CreatedDate, FromEmail = CurrentUserEmail });
                        await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", ContactId, CurrentUserId);
                    }
                    else if ((ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
                    {
                        messages.Add(new ChatMessages { Message = message.Message, CreatedDate = message.CreatedDate, FromEmail = ContactEmail });
                    }
                    StateHasChanged();
                }
            });
            var user = await _accountService.GetUserDataFromLocalStorage();
            CurrentUserId = user.Id.ToString();
            CurrentUserEmail = user.Email;
            await GetAllFavorites(CurrentUserId);
            if (!string.IsNullOrEmpty(ContactId))
            {
                await LoadUserChat(ContactId);
            }
        }

        catch (Exception ex)
        {
            error = ex.Message;
        }

    }
    public List<Models.FavoritesListResponse> ChatUsers = new List<Models.FavoritesListResponse>();
    [Parameter] public string ContactEmail { get; set; }
    [Parameter] public string ContactId { get; set; }
    async Task LoadUserChat(string userId)
    {
        await CheckConnection();
        var contact = await _accountService.GetUserDetailsAsync(userId);
        ContactId = contact.Id.ToString();
        ContactEmail = contact.Email;
        messages = new List<Models.ChatMessages>();
        messages = await _chatService.GetConversationAsync(ContactId,CurrentUserId);
    }
    async Task LoadFullChatHistory(string userId)
    {
        var contact = await _accountService.GetUserDetailsAsync(userId);
        ContactId = contact.Id.ToString();
        ContactEmail = contact.Email;
        messages = new List<Models.ChatMessages>();
        messages = await _chatService.GetFullChatHistory(ContactId,CurrentUserId);
    }
    async Task GetAllFavorites(string id)
    {
        ChatUsers = await _favoriteService.GetAllFavoritesForAccountAsync(CurrentUserId);
    }
    private void ShowInformation(string userId)
    {
        ContactId = userId;
        _navigationManager.NavigateTo($"card/{ContactId}");
    }

    private async Task CheckConnection()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl(new Uri("https://localhost:7202/chat")).WithAutomaticReconnect().Build();
        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        if(hubConnection.State == HubConnectionState.Connected)
        {
            Online = true;
        }
    }
}
}
