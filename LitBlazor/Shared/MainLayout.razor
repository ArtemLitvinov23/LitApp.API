@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject ISnackbar _snackBar
@inject IChatService _chatService


@if (LoggedIn)
{
<audio id="notification" src="/media/notification.mp3" />
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="0">
        <MudText Typo="Typo.h6" Class="ml-4">Blazor Chat</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudToolBar DisableGutters="true">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
        </MudToolBar>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <CascadingValue Value="hubConnection">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>
}

<div class="app-container @(LoggedIn ? "bg-light" : "")">
    @Body
</div>

@code {
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    bool _drawerOpen = false;
    private string CurrentUserId { get; set; }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public bool LoggedIn
    {
        get { return AccountService.Account != null; }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44311/signalRHub").Build();
        await hubConnection.StartAsync();
        hubConnection.On<string, string, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
        {
            if (CurrentUserId == receiverUserId)
            {
                _snackBar.Add(message, Severity.Info, config =>
                {
                    config.VisibleStateDuration = 10000;
                    config.HideTransitionDuration = 500;
                    config.ShowTransitionDuration = 500;
                    config.Action = "Chat?";
                    config.ActionColor = Color.Info;
                    config.Onclick = snackbar =>
                    {
                        NavigationManager.NavigateTo($"chat/{senderUserId}");
                        return Task.CompletedTask;
                    };
                });
            }
        });
        var user = await AccountService.GetUserDataFromLocalStorage();
        CurrentUserId = user.Id.ToString();
    }
}
