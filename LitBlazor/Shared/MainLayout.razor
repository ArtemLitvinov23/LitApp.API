@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject ISnackbar _snackBar
@inject IChatService _chatService
@inject IAccountService _accountService
@inject NavigationManager _navigationManager


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Dark"> 
         <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"  OnClick="@((e) => DrawerToggle())" Edge="Edge.Start" />
         <MudText Typo="Typo.h6" Class="ml-4">Litchat</MudText>
         <MudSpacer />
         <MudIconButton Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Inherit"/>
         <MudIconButton OnClick="@(() => EditProfile(CurrentUserId))" Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit"></MudIconButton>
         <MudIconButton OnClick="@(() => Logout())" Icon="@Icons.Outlined.Logout" Color="Color.Inherit"></MudIconButton>
    </MudAppBar>
    <MudDrawer @bind-Open=" _drawerOpen" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <CascadingValue Value="hubConnection">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private HubConnection hubConnection;
    [Parameter] public string CurrentUserId{ get; set; }
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    bool _drawerOpen = false;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task EditProfile(string id)=>await GetDatails(id);

    private void Logout()
    {
        NavigationManager.NavigateTo("/account/logout");
    }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44311/signalRHub").Build();
        await hubConnection.StartAsync();
        hubConnection.On<string, string, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
        {
            if (CurrentUserId == receiverUserId)
            {
                _snackBar.Add(message, Severity.Info, config =>
                {
                    config.VisibleStateDuration = 10000;
                    config.HideTransitionDuration = 500;
                    config.ShowTransitionDuration = 500;
                    config.Action = "Chat?";
                    config.ActionColor = Color.Info;
                    config.Onclick = snackbar =>
                    {
                        NavigationManager.NavigateTo($"chat/{senderUserId}");
                        return Task.CompletedTask;
                    };
                });
            }
        });
        var user = await AccountService.GetUserDataFromLocalStorage();
        CurrentUserId = user.Id.ToString();
    }
        private async Task GetDatails(string id)
        {
        var contact = await _accountService.GetUserDetailsAsync(id);
        CurrentUserId = contact.Id.ToString();
        _navigationManager.NavigateTo($"profile/{CurrentUserId}");
        }
}
