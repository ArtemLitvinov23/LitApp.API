@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Dark"> 
         <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"  OnClick="@((e) => DrawerToggle())" Edge="Edge.Start"/>
         <MudText Typo="Typo.h6" Class="ml-4">Litchat</MudText>
         <MudSpacer />
         @if(_accountService.Account !=null)
        {
          <MudText>@_accountService.Account.Email.ToLower()</MudText>
        }
         <MudIconButton Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Inherit"/>
         <MudIconButton OnClick="@(() => EditProfile(CurrentUserId))" Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit"></MudIconButton>
         <MudIconButton OnClick="@(() => Logout())" Icon="@Icons.Outlined.Logout" Color="Color.Inherit"></MudIconButton>
    </MudAppBar>
    <MudDrawer @bind-Open=" _drawerOpen" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <CascadingValue Value="hubConnection">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private HubConnection hubConnection;
    [Parameter] public string CurrentUserId{ get; set; }
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    bool _drawerOpen = false;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void EditProfile(string id)=>_navigationManager.NavigateTo($"/profile");

    private async Task Logout()
    {
        await hubConnection.StopAsync();
        _navigationManager.NavigateTo("/account/logout");
    }
    protected override async Task OnInitializedAsync()
    {
        if (_accountService.Account.JwtToken == null)
        {
            _navigationManager.NavigateTo("/account/login");
        }
        else
        {
            hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44311/chat", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(_accountService.Account.JwtToken);

            }).WithAutomaticReconnect().Build();
            await hubConnection.StartAsync();
            CurrentUserId = _accountService.Account.Id.ToString();
            hubConnection.On<string, string, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
            {
                if (CurrentUserId == receiverUserId)
                {
                    _snackBar.Add(message, Severity.Info, config =>
                    {
                        config.VisibleStateDuration = 10000;
                        config.HideTransitionDuration = 500;
                        config.ShowTransitionDuration = 500;
                        config.Action = "Chat?";
                        config.ActionColor = Color.Info;
                        config.Onclick = snackbar =>
                        {
                            _navigationManager.NavigateTo($"chat/{senderUserId}");
                            return Task.CompletedTask;};});
                }
            });
        } 
    }
}
